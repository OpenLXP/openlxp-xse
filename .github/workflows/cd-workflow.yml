# This is a basic workflow to help you get started with Actions

name: Docker CD

on:
  push:
    branches: 
      - main
      - dev
      - actions-ecr
  pull_request:
    branches: 
      - main
      - dev
    types: [opened, synchronize, reopened]

jobs:
  code-test:
    # Kicks off the workflow and prepares Github to run coverage test using a ubuntu-latest container.
    name: Code Test
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-latest
      PYTHON: '3.9'
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    # Install dependencies required for tests
    - name: Install Dependencies
      run: |
        sudo apt-get update 
        sudo apt-get install libxml2-dev libxmlsec1-dev -y --no-install-recommends
        python -m pip install --upgrade pip
        cd src/
        pip install -r ./requirements.txt

    # Start running test scripts and generate the coverage report
    - name: Generate Coverage Report
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        CERT_VOLUME: ${{ secrets.CERT_VOLUME }}
      run: |
        echo "Create openlxp docker network"
        docker network create openlxp
        echo "Docker network successfully created"
        echo "Running coverage unit test"
        docker-compose run 

  # sonarcloud:
  #   name: SonarCloud
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - name: SonarCloud Scan
  #     uses: sonarsource/sonarcloud-github-action@master
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build:
    # requires dependency from step above
    needs: code-test
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: xse
        run: |
          echo "Starting docker build"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
    # steps:
    # - name: Checkout Code
    #   uses: actions/checkout@v2
    # - name: Docker login
    #   env:
    #    DOCKER_USER: ${{ secrets.DOCKER_USER }}
    #    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #   run: |
    #    echo "Authenticate to Docker"
    #    docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    # - name: Docker build
    #   run: |
    #    echo "Start docker build"
    #    docker build . -t openlxp/openlxp-xse
    # - name: Push Image
    #   run: |
    #    echo "Push new image to the Dockerhub repository"
    #    docker push openlxp/openlxp-xse
